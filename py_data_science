#packages sao diretorios de scripts (modulos) que especificam funcoes, metodos e tipos
#numpy e o pacote de python para trabalhar eficientemente com arrays
#matplotlib e o pacote de python para visualizacao de data
#scikit-learn e o pacote para trabalhar com machine learning

#instalando pacotes no seu proprio sistema:
#http://pip.readthedocs.org/en/stable/installing/
#download: get-pip.py
#ir para o terminal e executar: python3 get-pip.py
#agora podemos usar pip para instalar qualquer pacote
#instalando numpy (no terminal): pip3 install numpy

#importantado pacotes ou modulos do pacote:
#import numpy (importar o pacote inteiro)
#import numpy as py (atribuir um outro nome para facilitar na chamada)
#from numpy import array (importar apenas um modulo do pacote)

#numpy arrays:
#so podem ter 1 tipo de elementos
#podemos fazer subsetting com arrays de booleans ex: x[>23] (so pega elementos onde ">23" for true)
#arrays podem ser multidimensionais (listas dentro de listas). array_exemplo.shape => atributo (sem chaves) que devolve o numero de linhas e colunas (e dimensoes) do array 
#subsetting 2d array: array[linha][coluna] ou array[linha,coluna]

import numpy as np

altura = np.round(np.random.normal(1.75, 0.20, 5000), 2) #argumenos de normal: (media, desvio padrao, amostras)
peso = np.round(np.random.normal(60.32, 15, 5000), 2)
np_cidade = np.column_stack(altura, peso) #juntar como colunas

#estatisticas basicas com numpy:
np.mean(np_cidade[:,0]) #media dos valores da primeira coluna de um array 2D
np.median(np_cidade[:,0]) #mediana 
np.corrcoef(np_cidade[:,0], np_cidade[:,0]) #coeficiencia de correlacao
np.std(np_cidade[:,0]) #desvio padrao
np.sum() #soma
np.sort() #ordenar

#DATA VISUALIZATION
  
import  matplotlib.pyplot as plt

year = [1950, 1970, 1990, 2010]
pop = [2.519, 3.692, 5.263, 6.972] #population in billions

#What to plot and how to plot a linear function graph. 
plt.plot(year, pop)
#shows displays the plot
plt.show()

#plot a graph of values scattered, just the individual datapoints.
plt.scatter(year, pop)
plt.show()

#change the scale of x axis for log
plt.xscale("log")
